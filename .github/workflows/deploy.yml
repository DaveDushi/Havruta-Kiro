name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: havruta_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/havruta_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test

      - name: Run E2E tests
        run: |
          npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/havruta_test
          REDIS_URL: redis://localhost:6379

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Update environment file
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.prod
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env.prod
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.prod
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.prod
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.prod
            echo "EMAIL_SERVICE_API_KEY=${{ secrets.EMAIL_SERVICE_API_KEY }}" >> .env.prod
            echo "SEFARIA_API_BASE_URL=${{ secrets.SEFARIA_API_BASE_URL }}" >> .env.prod
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.prod
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.prod
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env.prod
            
            # Run database migrations
            docker run --rm --env-file .env.prod ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest npx prisma migrate deploy
            
            # Deploy with zero downtime
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
            
            # Clean up old images
            docker image prune -f

      - name: Run health checks
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Wait for services to be ready
            sleep 30
            
            # Check application health
            curl -f http://localhost/health || exit 1
            
            # Check database connectivity
            docker-compose -f docker-compose.prod.yml exec -T postgres pg_isready || exit 1
            
            # Check Redis connectivity
            docker-compose -f docker-compose.prod.yml exec -T redis redis-cli ping || exit 1

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()